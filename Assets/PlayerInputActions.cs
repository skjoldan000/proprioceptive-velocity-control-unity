//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Setup"",
            ""id"": ""f027a049-9c22-47db-897d-7973fd98a069"",
            ""actions"": [
                {
                    ""name"": ""PositionDesk"",
                    ""type"": ""Button"",
                    ""id"": ""31e4f2e1-bff4-423d-8a04-b2803f38d2a7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PositionDeskHighlight"",
                    ""type"": ""Button"",
                    ""id"": ""c00340be-2518-41c7-b890-a0b78b35f82b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7b509734-11cc-41aa-b6e1-b03e9e0152e4"",
                    ""path"": ""<OculusTouchController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PositionDesk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbf4196e-d4c0-43ce-a981-afc80b7dda22"",
                    ""path"": ""<OculusTouchController>{LeftHand}/primaryTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PositionDeskHighlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""QuestControllers"",
            ""bindingGroup"": ""QuestControllers"",
            ""devices"": []
        }
    ]
}");
        // Setup
        m_Setup = asset.FindActionMap("Setup", throwIfNotFound: true);
        m_Setup_PositionDesk = m_Setup.FindAction("PositionDesk", throwIfNotFound: true);
        m_Setup_PositionDeskHighlight = m_Setup.FindAction("PositionDeskHighlight", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_Setup.enabled, "This will cause a leak and performance issues, PlayerInputActions.Setup.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Setup
    private readonly InputActionMap m_Setup;
    private List<ISetupActions> m_SetupActionsCallbackInterfaces = new List<ISetupActions>();
    private readonly InputAction m_Setup_PositionDesk;
    private readonly InputAction m_Setup_PositionDeskHighlight;
    public struct SetupActions
    {
        private @PlayerInputActions m_Wrapper;
        public SetupActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PositionDesk => m_Wrapper.m_Setup_PositionDesk;
        public InputAction @PositionDeskHighlight => m_Wrapper.m_Setup_PositionDeskHighlight;
        public InputActionMap Get() { return m_Wrapper.m_Setup; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SetupActions set) { return set.Get(); }
        public void AddCallbacks(ISetupActions instance)
        {
            if (instance == null || m_Wrapper.m_SetupActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SetupActionsCallbackInterfaces.Add(instance);
            @PositionDesk.started += instance.OnPositionDesk;
            @PositionDesk.performed += instance.OnPositionDesk;
            @PositionDesk.canceled += instance.OnPositionDesk;
            @PositionDeskHighlight.started += instance.OnPositionDeskHighlight;
            @PositionDeskHighlight.performed += instance.OnPositionDeskHighlight;
            @PositionDeskHighlight.canceled += instance.OnPositionDeskHighlight;
        }

        private void UnregisterCallbacks(ISetupActions instance)
        {
            @PositionDesk.started -= instance.OnPositionDesk;
            @PositionDesk.performed -= instance.OnPositionDesk;
            @PositionDesk.canceled -= instance.OnPositionDesk;
            @PositionDeskHighlight.started -= instance.OnPositionDeskHighlight;
            @PositionDeskHighlight.performed -= instance.OnPositionDeskHighlight;
            @PositionDeskHighlight.canceled -= instance.OnPositionDeskHighlight;
        }

        public void RemoveCallbacks(ISetupActions instance)
        {
            if (m_Wrapper.m_SetupActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISetupActions instance)
        {
            foreach (var item in m_Wrapper.m_SetupActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SetupActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SetupActions @Setup => new SetupActions(this);
    private int m_QuestControllersSchemeIndex = -1;
    public InputControlScheme QuestControllersScheme
    {
        get
        {
            if (m_QuestControllersSchemeIndex == -1) m_QuestControllersSchemeIndex = asset.FindControlSchemeIndex("QuestControllers");
            return asset.controlSchemes[m_QuestControllersSchemeIndex];
        }
    }
    public interface ISetupActions
    {
        void OnPositionDesk(InputAction.CallbackContext context);
        void OnPositionDeskHighlight(InputAction.CallbackContext context);
    }
}
